const express = require("express");
const bcrypt = require("bcryptjs");
const mongoose = require("mongoose");
const User = require("../models/User");
const authMiddleware = require("../middleware/authMiddleware");

const router = express.Router();

/**
 * üìå API: L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
 * üîπ Route: GET /api/users/profile
 * üîπ B·∫£o v·ªá: Y√™u c·∫ßu x√°c th·ª±c (JWT)
 */
router.get("/profile", authMiddleware, async (req, res) => {
    try {
        const user = await User.findById(req.user.id).select("-password");
        if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });

        res.json(user);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server!" });
    }
});

/**
 * üìå API: C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n (ch·ªâ c·∫≠p nh·∫≠t t√™n)
 * üîπ Route: PUT /api/users/update-profile
 * üîπ B·∫£o v·ªá: Y√™u c·∫ßu x√°c th·ª±c (JWT)
 */
router.put("/update-profile", authMiddleware, async (req, res) => {
    try {
        const { username } = req.body;

        if (!username) return res.status(400).json({ message: "T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!" });

        // Chuy·ªÉn id v·ªÅ ObjectId
        const userId = new mongoose.Types.ObjectId(req.user.id);

        const user = await User.findOne({ _id: userId });
        if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });

        user.username = username;
        await user.save();

        res.json({ message: "C·∫≠p nh·∫≠t t√™n th√†nh c√¥ng!", user });
    } catch (error) {
        console.error("‚ùå L·ªói c·∫≠p nh·∫≠t:", error);
        res.status(500).json({ message: "L·ªói server!" });
    }
});


/**
 * üìå API: ƒê·ªïi m·∫≠t kh·∫©u
 * üîπ Route: PUT /api/users/change-password
 * üîπ B·∫£o v·ªá: Y√™u c·∫ßu x√°c th·ª±c (JWT)
 */
router.put("/change-password", authMiddleware, async (req, res) => {
    try {
        const { oldPassword, newPassword } = req.body;

        const user = await User.findById(req.user.id);
        if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });

        // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
        const isMatch = await bcrypt.compare(oldPassword, user.password);
        if (!isMatch) return res.status(400).json({ message: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!" });

        // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi v√† c·∫≠p nh·∫≠t
        const hashedPassword = await bcrypt.hash(newPassword, 10);
        user.password = hashedPassword;
        await user.save();

        res.json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!" });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server!" });
    }
});

module.exports = router;
