const express = require("express");
const Task = require("../models/Task");
const authMiddleware = require("../middleware/authMiddleware");

const router = express.Router();

// L·∫•y danh s√°ch c√¥ng vi·ªác (c√≥ h·ªó tr·ª£ l·ªçc theo tr·∫°ng th√°i)
router.get("/", authMiddleware, async (req, res) => {
    try {
        const { status } = req.query; // L·∫•y tr·∫°ng th√°i t·ª´ query string
        let filter = { userId: req.user.id };

        if (status) {
            filter.status = status; // L·ªçc theo tr·∫°ng th√°i n·∫øu c√≥
        }

        const tasks = await Task.find(filter);
        res.json(tasks);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server!" });
    }
});

// L·ªçc c√¥ng vi·ªác ƒë√£ qu√° h·∫°n
router.get("/overdue", authMiddleware, async (req, res) => {
    try {
        const now = new Date();
        const overdueTasks = await Task.find({
            userId: req.user.id,
            deadline: { $lt: now }, // L·ªçc c√¥ng vi·ªác c√≥ deadline nh·ªè h∆°n th·ªùi gian hi·ªán t·∫°i
            status: "pending"
        });

        res.json(overdueTasks);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server!" });
    }
});



// Th√™m c√¥ng vi·ªác m·ªõi
router.post("/", authMiddleware, async (req, res) => {
    try {
        const { title, description, deadline } = req.body;

        const newTask = new Task({
            userId: req.user.id,
            title,
            description,
            deadline
        });

        await newTask.save();
        res.status(201).json(newTask);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server!" });
    }
});


// C·∫≠p nh·∫≠t c√¥ng vi·ªác
router.put("/:id", authMiddleware, async (req, res) => {
    try {
        const { title, description, status, deadline } = req.body;

        const task = await Task.findOneAndUpdate(
            { _id: req.params.id, userId: req.user.id },
            { title, description, status, deadline },
            { new: true }
        );

        if (!task) return res.status(404).json({ message: "C√¥ng vi·ªác kh√¥ng t·ªìn t·∫°i!" });

        res.json(task);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server!" });
    }
});


// X√≥a c√¥ng vi·ªác
router.delete("/:id", authMiddleware, async (req, res) => {
    try {
        const task = await Task.findOneAndDelete({ _id: req.params.id, userId: req.user.id });

        if (!task) return res.status(404).json({ message: "C√¥ng vi·ªác kh√¥ng t·ªìn t·∫°i!" });

        res.json({ message: "ƒê√£ x√≥a c√¥ng vi·ªác!" });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server!" });
    }
});

// üü¢ ƒê√°nh d·∫•u ho√†n th√†nh / ch∆∞a ho√†n th√†nh c√¥ng vi·ªác
router.patch("/:id/toggle", authMiddleware, async (req, res) => {
    try {
        const task = await Task.findOne({ _id: req.params.id, userId: req.user.id });
        if (!task) return res.status(404).json({ message: "C√¥ng vi·ªác kh√¥ng t·ªìn t·∫°i!" });

        task.completed = !task.completed; // ƒê·∫£o tr·∫°ng th√°i
        await task.save(); // L∆∞u v√†o MongoDB

        res.json({
            message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!",
            completed: task.completed
        });
    } catch (error) {
        console.error("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error.message);
        res.status(500).json({ message: "L·ªói server!", error: error.message });
    }
});

module.exports = router;